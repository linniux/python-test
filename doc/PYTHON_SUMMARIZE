Python 有一点点函数化编程（functional programming ，FP）结构，这使得它有点类似
List 或Scheme 语言。尽管Python 不是传统的函数化编程语言， 但它持续的从Lisp 和haskell
语言中借用一些有价值的特性。举例来说， 列表解析就是一个广受欢迎的来自Haskell 世界的
特性， 而Lisp 程序员在遇到 lambda, map, filter 和reduce 时也会感到异常亲切。

JavaScript 是另外一种非常类似Python 的面向对象脚本语言。优秀的JavaScript 程序员
学起Python 来易如反掌。 聪慧的读者会注意到JavaScript 是基于原型系统的， 而Python 则
遵循传统的面向对象系统， 这使得二者的类和对象有一些差异。

核心笔记：什么是属性？
属性是与数据有关的项目， 属性可以是简单的数据值， 也可以是可执行对象， 比如函数
和方法。哪些对象拥有属性呢？ 很多。 类， 模块， 文件还有复数等等对象都拥有属性。
我如何访问对象属性？ 使用句点属性标识法。 也就是说在对象名和属性名之间加一个句
点： object.attribute

PYTHON
下划线(_)在解释器中有特别的含义，表示最后一个表达式的值
Python 的print 语句，与字符串格式运算符( % )结合使用，可实现字符串替换功能，这
一点和 C 语言中的printf()函数非常相似

Python 不支持C 语言中的自增1 和自减1 运算符， 这是因为 + 和 － 也是单目运算符，
Python 会将 --n 解释为-(-n) 从而得到 n , 同样 ++n 的结果也是 n.


Python 支持五种基本数字类型，其中有三种是整数类型。
 int (有符号整数)
 long (长整数)
 bool (布尔值)
 float (浮点值)
 complex (复数)
 
 
Python 中有两种有趣的类型是 Python 的长整型和复数类型。请不要将Python 的长整数
与C 语言的长整数混淆。Python 的长整数所能表达的范围远远超过C 语言的长整数， 事实上，
Python 长整数仅受限于用户计算机的虚拟内存总数。如果你熟悉 Java, Python 的长整数类似
于 Java 中的BigInteger 类型。
从长远来看， 整型与长整型正在逐步统一为一种整数类型。从Python2.3 开始，再也不会
报整型溢出错误， 结果会自动的被转换为长整数。在未来版本的Python 中， 两种整数类型将
会无缝结合， 长整数后缀 “L”也会变得可有可无。

二  字符串
Python 中字符串被定义为引号之间的字符集合。Python 支持使用成对的单引号或双引号，
三引号（三个连续的单引号或者双引号）可以用来包含特殊字符。使用索引运算符( [ ] )和切
片运算符( [ : ] )可以得到子字符串。字符串有其特有的索引规则：第一个字符的索引是 0，
最后一个字符的索引是 －1
加号( + )用于字符串连接运算，星号( * )则用于字符串重复。下面是几个例子

三 列表(List)和元组(Tuple)
可以将列表和元组当成普通的“数组”，它能保存任意数量任意类型的Python 对象。和数
组一样，通过从0 开始的数字索引访问元素，但是列表和元组可以存储不同类型的对象。

列表和元组有几处重要的区别。列表元素用中括号( [ ])包裹，元素的个数及元素的值可
以改变。
元组元素用小括号(( ))包裹，不可以更改（尽管他们的内容可以）。元组可以看成是
只读的列表。通过切片运算( [ ] 和 [ : ] )可以得到子集，这一点与字符串的使用方法一样。
元组也可以进行切片运算，得到的结果也是元组（不能被修改）.

四 字典
字典是Python 中的映射数据类型，工作原理类似Perl 中的关联数组或者哈希表，由键-
值(key-value)对构成。几乎所有类型的Python 对象都可以用作键，不过一般还是以数字或者
字符串最为常用。不允许一个键同时出现两次，如果同时被赋值两次，后一个值会被记住。
值可以是任意类型的Python 对象，字典元素用大括号({ })包裹。

五 循环
Python 中的for 循环与传统的for 循环（计数器循环）不太一样， 它更象shell 脚本里
的foreach 迭代。Python 中的for 接受可迭代对象（例如序列或迭代器）作为其参数，每次
迭代其中一个元素。

print 语句默认会给每一行添加一个换行
符。只要在print 语句的最后添加一个逗号(,)， 就可以改变它这种行为

range()函数经常和len()函数一起用于字符串索引。 在这里我们要显示每一个元素及其
索引值：
>>> foo = 'abc'
>>> for i in range(len(foo)):
... print foo[i], '(%d)' % i

你要么循环索引， 要么循环元素。这导致了enumerate()
函数的推出（Python2.3 新增）。 它同时做到了这两点：
>>> for i, ch in enumerate(foo):
... print ch, '(%d)' % i

六 错误和异常
编译时会检查语法错误， 不过 Python 也允许在程序运行时检测错误。当检测到一个错误，
Python 解释器就引发一个异常， 并显示异常的详细信息。程序员可以根据这些信息迅速定位
问题并进行调试， 并找出处理错误的办法。
要给你的代码添加错误检测及异常处理， 只要将它们封装在 try-except 语句当中。 try
之后的代码组， 就是你打算管理的代码。 except 之后的代码组， 则是你处理错误的代码。

程序员也可以通过使用 raise 语句故意引发一个异常。

七 函数
类似其它的语言， Python 中的函数使用小括号( () )调用。函数在调用之前必须先定义。
如果函数中没有 return 语句， 就会自动返回 None 对象。
Python 是通过引用调用的。 这意味着函数内对参数的改变会影响到原始对象。不过事实
上只有可变对象会受此影响， 对不可变对象来说， 它的行为类似按值调用。

八 类
类是面向对象编程的核心， 它扮演相关数据及逻辑的容器角色。它们提供了创建“真实”
对象(也就是实例)的蓝图。因为Python 并不强求你以面向对象的方式编程（与Java 不同）， 此
刻你也可以不学习类。 不过我们还是在这儿放了些例子， 以方便感兴趣的读者浏览。

使用 class 关键字定义类。 可以提供一个可选的父类或者说基类; 如果没有合适的基类，
那就使用 object 作为基类




当一个类实例被创建时，__init__() 方法会自动执行，在类实例创建完毕后执行，类似构建函数。它的目的是执行一些该对象必要的初始化工作。

什么是self,它是类实例自身的引用。 其他语言通常使用一个名为this 的标识符。

九 模块
模块是一种组织形式，他将彼此有关系的Python代码组织到一个个独立文件当中。
模块可以包含可执行代码，函数和类或者这些东西的组合。一个模块创建后，你可以从另一个模块中使用import 语句导入这个模块使用。
import module_name

核心笔记：什么是“PEP”？ 
在本书中你会经常看到 PEP 这个字眼。 一个 PEP 就是一个 Python 增强提案(Python 
Enhancement Proposal)，这也是在新版 Python 中增加新特性的方式。 从初学者的角度看， 
它们是一些高级读物，它们不但提供了新特性的完整描述，还有添加这些新特性的理由，如
果需要的话， 还会提供新的语法、 技术实现细节、向后兼容信息等等。在一个新特性被整合
进Python 之前，必须通过Python 开发社区，PEP 作者及实现者，还有Python 的创始人，Guido 
van Rossum(Python 终身的仁慈的独裁者）的一致同意。PEP1 阐述了PEP 的目标及书写指南。
在 PEP0 中可以找到所有的 PEP。 PEP 索引的网址是：http://python.org/dev/peps



range([[start,]stop[,step]) 返回一个整数列表。起始值为 start, 结束值为 stop - 1; start 
默认值为 0， step默认值为1。
dir([obj]) 显示对象的属性，如果没有提供参数， 则显示全局变量的名字












