本章主题 
z  语句和语法 
z  变量赋值 
z  标识符和关键字 
z  基本风格指南 
z  内存管理 
z  第一个 Python 程序


首要说明的事情是：尽管 Python 是可读性最好的语言之一，这并不意味着程序员在代码中
就可以不写注释。和很多 Unix 脚本类似，Python注释语句从 # 字符开始，注释可以在一行
的任何地方开始，解释器会忽略掉该行 # 之后的所有内容。要正确的使用注释。 

Python 语句，一般使用换行分隔，也就是说一行一个语句。一行过长的语句可以使用反斜
杠( \ ) 分解成几行，如下例： 
# check conditions 
if (weather_is_hot == 1) and \ 
(shark_warnings == 0): 

一 代码组由不同的缩进分隔
核心风格：缩进四个空格宽度，避免使用制表符

使用缩进对齐这种方式组织代码，不但代码风格优雅，而且也大大提高了代码的可读性。
而且它有效的避免了"悬挂 else"（dangling-else）问题，和未写大括号的单一子句问题。（如
果 C 语言中 if 语句没写大括号，而后面却跟着两个缩近的语句，这会造成不论条件表达式是
否成立，第二个语句总会执行。这种问题很难调试，不知道困惑了多少程序员。） 

二 同一行书写多个语句(;)
分号( ; )允许你将多个语句写在同一行上，语句之间用分号隔开，而这些语句也不能在这
行开始一个新的代码块。 同一行上书写多个语句会大大降低代码的可读性，Python 虽然允许但不
提倡你这么做。 

三 变量赋值
Python语言中，等号(=)是主要的赋值运算符。 (其他的是增量运算符)
注意：赋值并不是直接将一个值赋给一个变量， 尽管你可能根据其它语言编程经验认为应
该如此。在 Python 语言中，对象是通过引用传递的。在赋值时，不管这个对象是新创建的，还
是一个已经存在的，都是将该对象的引用（并不是值）赋值给变量。
x = 1
x += 1

在其它类似 C 的语言中， 如果你要交换两个值， 你会想到使用一个临时变量比如 tmp 来
临时保存其中一个值.Python 的多元赋值方式可以实现无需中间变量交换两个变量的值

x , y = 1, 2
x , y = y, x

四  标识符
合法的标识符
第一个字符必须是字母或下划线 (_)
剩下的字符可以是字母和字符或下划线。
大小写敏感。
标识符不能以数字开头；除了下划线，其他的符号都不允许使用

五  内建

六 专用下划线标识符
Python 用下划线作为变量前缀和后缀指定特殊变量。稍后我们会发现，对于程序来说，其
中的有些变量是非常有用的，而其他的则是未知或无用的。这里对 Python 中下划线的特殊用法
                          
做了总结： 
 _xxx 不用'from module import *'导入 
 __xxx__系统定义名字 
 __xxx 类中的私有变量名 

核心风格：避免用下划线作为变量名的开始 
因为下划线对解释器有特殊的意义，而且是内建标识符所使用的符号，我们建议程序员避
免用下划线作为变量名的开始。一般来讲，变量名_xxx 被看作是“私有的”，在模块或类外不
可以使用。当变量是私有的时候，用_xxx 来表示变量是很好的习惯。因为变量名__xxx__对
Python 来说有特殊含义，对于普通的变量应当避免这种命名风格。 

七  推荐代码风格：主程序调用 main()函数 
主程序代码通常都和你前面看到的代码相似，检查 __name__ 变量的值然后再执行相应的
调用（参阅下一页的核心笔记）。主程序中的代码通常包括变量赋值， 类定义和函数定义，随
后检查__name__来决定是否调用另一个函数（通常调用 main()函数）来完成该模块的功能。主
程序通常都是做这些事。（我们上面的例子中使用 test()而不是main()是为了避免你在读到核
心笔记前感到迷惑。） 不管用什么名字，我们想强调一点那就是：这儿是放置测试代码的好地
方。我们在 3.4.2 小节中曾经说过，大部分的Python 模块都是用于导入调用的，直接运行模块
应该调用该模块的回归测试代码。


很多项目都是一个主程序，由它导入所有需要的模块。所以请记住，绝大部分的模块创建
的目的是为了被别人调用而不是作为独立执行的脚本。我们也很可能创建一个 Python 库风格的
Edit By Vheavens 
Edit By Vheavens                               
模块，这种模块的创建目的就是为了被其他模块调用。总之，只有一个模块，也就是包含主程
序的模块会被直接执行，或由用户通过命令行执行，或作为批处理执行， 或由 Unix cron 任务
定时执行，或通过 Web 服务器调用，或通过 GUI 执行。 

时刻记住一个事实，那就是所有的模块都有能力来执行代码。最高级别的 Python 语句－－
也就是说， 那些没有缩进的代码行在模块被导入时就会执行， 不管是不是真的需要执行。由
于有这样一个“特性”，比较安全的写代码的方式就是除了那些真正需要执行的代码以外， 几
乎所有的功能代码都在函数当中。再说一遍，通常只有主程序模块中有大量的顶级可执行代码，
所有其它被导入的模块只应该有很少的顶级执行代码，所有的功能代码都应该封装在函数或类
当中。 


八 核心笔记：__name__ 指示模块应如何被加载 

由于主程序代码无论模块是被导入还是被直接执行都会运行，我们必须知道模块如何决定
运行方向。一个应用程序可能需要导入另一个应用程序的一个模块，以便重用一些有用的代码
（否则就只能用拷贝粘贴那种非面向对象的愚蠢手段）。这种情况下，你只想访问那些位于其
它应用程序中的代码，而不是想运行那个应用程序。因此一个问题出现了，“Python 是否有
一种方法能在运行时检测该模块是被导入还是被直接执行呢？” 答案就是......(鼓声雷
动).....没错！ __name__ 系统变量就是正确答案。 
如果模块是被导入， __name__ 的值为模块名字 
如果模块是被直接执行， __name__ 的值为 '__main__' 

九 在主程序中书写测试代码

十 动态类型
还要注意一点，Python 中不但变量名无需事先声明，而且也无需类型声明。Python 语言中， 
对象的类型和内存占用都是运行时确定的。尽管代码被编译成字节码，Python 仍然是一种解释
型语言。在创建－－也就是赋值时，解释器会根据语法和右侧的操作数来决定新对象的类型。
在对象创建后，一个该对象的应用会被赋值给左侧的变量

内存分配
作为一个负责任的程序员，我们知道在为变量分配内存时，是在借用系统资源，在用完之
后， 应该释放借用的系统资源。Python 解释器承担了内存管理的复杂任务， 这大大简化了应
用程序的编写。你只需要关心你要解决的问题，至于底层的事情放心交给 Python 解释器去做就
行了

引用计数

def 语句

垃圾收集
一个循环引用发生在当你有至少两个对象互相引用时，也就是说所有的引用都消失时，这
些引用仍然存在， 这说明只靠引用计数是不够的。Python 的垃圾收集器实际上是一个引用计
数器和一个循环垃圾收集器。 当一个对象的引用计数变为 0，解释器会暂停，释放掉这个对象
和仅有这个对象可访问（可到达）的其它对象。作为引用计数的补充， 垃圾收集器也会留心被
分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下
来， 试图清理所有未引用的循环。


十一  相关模块和开发工具
Python 代码风格指南（PEP8）, Python 快速参考和 Python 常见问答都是开发者很重要的
“工具”。另外， 还有一些模块会帮助你成为一个优秀的 Python 程序员。 
 Debugger: pdb 
 Logger: logging   (共有五级日志级别： 紧急， 错误，警告，信息和调试)
 Profilers: profile, hotshot, cProfile

调试模块 pdb 允许你设置（条件）断点，代码逐行执行，检查堆栈。它还支持事后调试
logging 共有五级日志级别： 紧急， 错误，警告，信息和调试

性能测试相关
cProfile 模块是 Python2.5 新增的， 它用来替换掉已经有历史的 hotshot 和 profile 模
块。被作者确认的它的一个较明显的缺点是它需要花较长时间从日志文件中载入分析结果， 不
支持子函数状态细节及某些结果不准。它也是用 C 语言来实现的。 








































